#服务器端口
server:
  port: 7001

# Spring
spring:
  application:
    # 应用名称
    name: cpms-server-gateway
    # gateway 网关本身没有contextPath，所以不能配置添加url前缀，这里只是作为变量，方便路由转发使用
    # 给网关服务增加一个url前缀后续用nginx转发的时候，可以通过 pathPrefix 来寻址
    pathPrefix: gw-server  # 请求接口的前缀

  #******** 激活自定义配置文件 ****#
  profiles:
    include: system

  cloud:
    nacos:
      #      config:
      #        server-addr: 120.0.0.1:8848
      #        file-extension: yaml
      #        prefix: nacos
      discovery: # 服务发现注册
        server-addr: 127.0.0.1:8858
    gateway:
      discovery:
        locator:
          enabled: true #让gateway可以发现nacos中的微服务，会从注册中心拉取注册的服务列表
      routes: # 路由数组  指当请求满足什么样的条件的时候，转发到哪个微服务上,一个微服务对应一组 -id
        - id: cpms-server-auth #当前路由标识，要求唯一 （可以取微服务应用名称）
          uri: lb://cpms-server-auth #请求最终要被转发的地址，cpms-server-auth微服务注册名称，lb指的是从nacos中按照名称获取微服务,并遵循负载均衡策略
          order: 1 #路由优先级，数字越小，优先级越高
          #### gateway 网关本身没有contextPath,所以不能配置添加url前缀，通过路由过滤器，达到能处理contextPath
          predicates: #断言 判断条件，返回值是boolean 转发请求要返回的条件 （可以写多个）、
            - Path=/${spring.application.pathPrefix}/authMicroservice/** #当请求路径满足path指定的规则时，此路由信息才会正常转发
          filters: #路由过滤器（在请求传递过程中，可以对路径进行重写）
            - StripPrefix=1 # 在请求转发之前去掉 -Path 参数值的N层路径， /*/*/* ，一个*号表示一层，从左到右
            # 熔断降级配置
            - name: Hystrix
              args:
                name: defaultfallback
                fallbackUri: 'forward:/defaultfallback'
        - id: cpms-server-system
          uri: lb://cpms-server-system
          order: 2
          predicates:
            - Path=/${spring.application.pathPrefix}/systemMicroservice/**
          filters:
            - StripPrefix=1
            - name: Hystrix
              args:
                name: defaultfallback
                fallbackUri: 'forward:/defaultfallback'
        - id: cpms-server-log
          uri: lb://cpms-server-log
          order: 3
          predicates:
            - Path=/${spring.application.pathPrefix}/logMicroservice/**
          filters:
            - StripPrefix=1
            - name: Hystrix
              args:
                name: defaultfallback
                fallbackUri: 'forward:/defaultfallback'

#ribbon配置 【ribbon超时设置，接口需要通过feign调用才会生效，否则超时配置无效】
#Ribbon超时和Hystrix超时将会以两个中小的为最终超时时间
ribbon:
  #对所有操作请求都进行重试,默认false
  OkToRetryOnAllOperations: false  # 默认关闭
  #两个服务建立连接后，本地服务等待接收远程服务返回数据时的超时时间，业务程序会影响接收时间，同时这个设置也是触发熔断的时间设置
  ReadTimeout:  10000  #本地服务等待接收远程服务返回数据最大所用时间，默认值5000
  #表示两个服务建立起http网络服务连接的时间，此过程一般是很快的，业务程序不会影响连接时间
  ConnectTimeout: 2000  #ribbon请求连接的超时时间，默认值2000
  MaxAutoRetries: 0    #对当前实例的重试次数，默认0
  MaxAutoRetriesNextServer: 0 #对切换实例的重试次数，默认1
  # 如果不添加 ribbon.http.client.enabled=true，那么 ribbon 的默认配置不会生效
  http:
    client:
      enabled: true


#hystrix降级熔断配置，必须要有熔断回调方法，否则超时配置不会生效,不会触发熔断
hystrix:
  command:
    default: # default全局有效
      execution:
        timeout:
          enabled: true  # 开启关闭指定方法hystrix熔断，如果关闭则不会触发熔断
        isolation:
          strategy: SEMAPHORE #切换隔离等级
          thread:
            timeoutInMilliseconds: 10000  # 网关下游服务可能调用链路比较长，所以超时设置要比下游微服务长一些，网关->A->B->C
  shareSecurityContext: true  #线程间传递上下文,不开启，切换线程获取不到上下文信息