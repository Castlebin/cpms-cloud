<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.cpms</groupId>
    <artifactId>cpms-cloud</artifactId>
    <packaging>pom</packaging>
    <version>1.0.0</version>
    <!--
      聚合工程打包，需要在父工程pom下，把modules注释掉，然后运行:
      1.clean
      2.install
      注：目的是把jar打在本地仓库，如果不这么做其它模块依赖子模块本地仓库没有就会区中央仓库找，这样就会报错
    -->
    <modules>
        <module>cpms-auth</module>
        <module>cpms-common</module>
        <module>cpms-gateway</module>
        <module>cpms-service</module>
        <module>cpms-service-api</module>
        <module>cpms-core-framework</module>
    </modules>
    <properties>
        <cpms.project.version>1.0.0</cpms.project.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <java.version>1.8</java.version>
        <spring-boot.version>2.2.7.RELEASE</spring-boot.version>
        <spring-cloud.version>Hoxton.SR5</spring-cloud.version>
        <spring-cloud-alibaba.version>2.2.1.RELEASE</spring-cloud-alibaba.version>
        <mybatis-plus.servsion>3.4.3</mybatis-plus.servsion>
        <dynamic-datasource.servsion>3.3.2</dynamic-datasource.servsion>
        <fastjson.version>1.2.75</fastjson.version>
        <guava.version>30.1.1-jre</guava.version>
        <jjwt.version>0.9.1</jjwt.version>
        <commons-beanutils.version>1.9.4</commons-beanutils.version>
    </properties>

    <!-- 依赖声明 -->
    <dependencyManagement>
        <dependencies>
            <!-- SpringCloud 微服务 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- SpringCloud Alibaba 微服务 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- SpringBoot相关的依赖项 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- mybatis-plus依赖-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.servsion}</version>
            </dependency>

            <!-- mybatis-plus dynamic-datasource实现动态数据源切换依赖 -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>dynamic-datasource-spring-boot-starter</artifactId>
                <version>${dynamic-datasource.servsion}</version>
            </dependency>


            <!-- alibaba JSON 解析器和生成器 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <!-- guava 工具类 -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--lombok依赖，所有模块都需要，放父pom.xml下。编译时需要的依赖-->
    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>
    <!--阿里云仓库-->
    <repositories>
        <repository>
            <id>nexus-aliyun</id>
            <name>Nexus aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
        </repository>
    </repositories>

    <build>
        <!--特别注意：
        直接在parent的build部分做了插件配置和运行定义。
        但是实际项目中需要把这些定义具体放到spring boot模块项目（可优化使用pluginManagement形式），避免干扰其他util、common等模块项目
        -->
        <pluginManagement>
            <plugins>
                <!--
                spring-boot-maven-plugin该插件会把应用打成一个可执行的jar包，然后把这个jar打到另外一个jar包中，同时把原来的jar增加后缀.original
                使用这个插件打包方式还是一样，在Lifecycle下点击package打包。在target目录下会看到有两个文件
                -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <configuration>
                        <finalName>${project.build.finalName}</finalName>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!--java编译插件，告诉maven在编译Java文件时使用什么版本的jre-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>